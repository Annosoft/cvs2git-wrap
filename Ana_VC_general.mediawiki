== CVS modules ==
=== Publicly visible ===
In the [http://cvs.sanger.ac.uk/cgi-bin/viewvc.cgi/ensembl-otter/?root=ensembl Ensembl CVS server],
 cvs -d :ext:cvs.sanger.ac.uk:/cvsroot/ensembl checkout

;ensembl: Core ensembl API
;ensembl-pipeline: Core ensembl analysis pipeline.
: Includes many scripts an subclasses specific to Anacode.
;ensembl-analysis: Modules used by analysis pipeline to do the actual work (blast searches etc...)
;<strike>ensembl-otter</strike>: ''Historic - no further updates.''  Our core modules which extend Ensembl and deal with saving gene annotations plus Perl/Tk GUI components are now stored in [[#Git repositories]].
: In the past, we have moved tags on this module.  <tt>humpub-branch-52</tt> and <tt>humpub-release-52</tt> are particularly affected by this.  [[#Migration to Git]] required some patch-up surgery as a result.
;ensembl-ace: Modules for transforming ensembl analysis pipeline data into acedb format

We have only sftp/scp access to these files.  This makes it possible to make exports, but not efficient to do repeat imports.  It is also possible to do direct surgery to ,v files - as ever this requires extreme caution.

=== Only accessible on the Sanger network ===
On the internal CVS server,

;PerlModules: Data objects used by the Perl/Tk GUI, plus Sanger specific modules for tasks such as EMBL sequence submissions
;submissions: Scripts used by cron jobs to submit sequence data to EMBL
;chromoview: Visualisation and assembly of chromosomes from overlapping BACs (TPFs to AGPs)
;humscripts: Mostly legacy scripts used in the humpub account
;utils: A few useful scripts mostly written by James eg: new_module for creating a new Perl module

We have full login access to these files.

In the past, we have moved tags on this repository.  <tt>humpub-branch-52</tt> and <tt>humpub-release-52</tt> are particularly affected by this.
Some modules still contain breakage which would render commitids in a cvs2git import unstable.

== Git repositories ==
There are some fresh- and forked- project Git repositories, and some cvs2git imports (see below).
All are visible in [...] the internal Git server.

=== Routine rebasing: author branches ===
We have "author branches" named like <tt>$USER/$FEATURE</tt> which other members of the team should consider read-only.

These may be rebased freely by the owner (working around the fast-forward-only restriction).

Please consult the branch owner before merging, branching from or pushing to these branches.

=== Copies where? ===
Git is decentralised, so repositories may exist in several places.

This list should cover all '''places''' where there are repositories, but does not attempt to enumerate all the repositories.

:; "the server": Everything of significance ''should'' be on <tt>git.internal.sanger.ac.uk</tt> ''aka.'' <tt>intcvs1</tt> .
:: We regard this as our central master repository.  It is our main point of exchange between developers, source for releases, and the repository most often named <tt>origin</tt> .
:; Github: Some projects are also pushed to [https://github.com/Anacode/ the "Anacode" organisation] on github.com
::* To become a member of Anacode on Github, you must create a personal account and be invited by an existing member.  These are all zero-price acounts.
::*: Github does not support the notion of an organisation ''doing'' anything, including pushing - all actions are taken by members of the organisation.
::* As of 2011-08 only release branches of ensembl-otter are [http://git.internal.sanger.ac.uk/cgi-bin/gitweb.cgi?p=anacode/team_tools.git;f=cron/github-pushes;hb=HEAD published] automatically, at 06:06 every day by mca@[http://git.internal.sanger.ac.uk/cgi-bin/gitweb.cgi?p=anacode/team_tools.git;a=tree;f=confomatic;hb=HEAD deskpro-mca].
::* cron2rss [https://github.com/Anacode/cron2rss/network/members was forked] from Github.
:; Developers: have zero or more checkouts of any of these, as necessary.
:: We usually don't fetch from each others working copies, but sometimes we do use this for previewing code.
:: We don't push to other developers.
:: Some repositories are important enough for one developer to have multiple checkouts.
::: mca has a "stable" team_tools to be used per se, and a "dev" team_tools in which rebases and feature branches can be used without breaking tools in use.
::: It is sometimes useful to push and fetch between these, so they have git-remote configuration for each other.
:; Installations and downloads: Our current build methods usually export, rather than leaving the <tt>.git/</tt> in the built copy.

=== Recovery: restoring a delete branch ===
What can you do if you delete a branch and then decide you want it back?
Note that "git branch -d" enthusiastically removes the reflog also!

Known options
* Fetch it back from somewhere.
* Scroll the terminal back up and find "<tt>Deleted branch foo (was 2d76e6c)</tt>".
* Raid the snapshot at <tt>~/../.snapshot/hourly.0/$USER/</tt> (but beware it may not have your last hour's work).
* Use <tt>gitk</tt> to see all commits not yet garbage-collected.
** The plan is to find the superset of existing commits not reachable from HEAD, everything visited in any reflog, and the log of HEAD. It can make a rather busy tree.
** Configure <tt>gitk</tt> to do this by inserting the following before the last "<tt>}</tt>" in <tt>~/.gitk</tt>&nbsp;. This appears on the View menu.  Refresh it with ctrl-f5.
  set permviews {{Lost {} --all {git fsck --full --unreachable HEAD | cut -d' ' -f3; git log -g --abbrev-commit --pretty=format:%H --all; echo; git log -g --abbrev-commit --pretty=format:%H; echo}}

=== [[wikipedia:Gumbys|Gumby]] repair: unpushing ===
In Git, any commit may be rebased, amended or otherwise munged.  But after it has been "pushed" to a place where other people/scripts might pull it, doing this can cause chaos and confusion.

; Push the replacement (to a new branch name) as soon as possible: so everyone can see and discuss it.  This is a safe, reversible operation.  Rewinding the Gumbied branch can be done after discussion.
; Talk to other repository fetchers before backtracking a branch:
:* Unless they are away, and waiting might make the chaos worse?
:* Beware some fetchers may have work branched from after the mistake, and may need help rescuing it.
:* Recommend the use of <tt>git fetch</tt> over <tt>git pull</tt> .  Merging is not going to help.
; The git tools do not make it easy:
:* The Git documentation recommends against it.
:* The central repositories have the default "shared" configuration, which forbids non-fast-forward pushes.
:* You can push a deletion of the branch, and then replace it with a rewind.  Except for master (or other default/checked out branch), where you must get on the server and rename or reset the master.
; Clean up ASAP: It is helpful if everyone picks up the new commit, forgets the old one, and rebases pending work where necessary, as soon as possible.
; Do not move tags:  It's too confusing, just use the next one in the sequence.
:* Deleting the old one is then easier.  It is just a bad tag which should be forgotten.
:* git-fetch(1) will not move tags, unless told to with <tt>--tags</tt>.
; Recognised good reasons to do it:
:* accidentally committing data-destroying or OS-crashing code, including uncontrolled recursion.  Rationale: they make use of git-bisect(1) less useful.

== Code QA measures ==
* We have tools to run Perlcritic and "perl -c" on our code
** [http://git.internal.sanger.ac.uk/cgi-bin/gitweb.cgi?p=anacode/team_tools.git;a=tree;f=elisp;hb=HEAD emacs linkage]
** For internal publishability, we check for AUTHOR sections in Perl source with perlcritic running on a Git hook
* Jeremy runs cronjobs and ad-hoc passes of some tools?
* intcvs1 {{git|anacode/ensembl-otter}} has '''.git/hooks'''
** to perlcritic the changed files (experimental)
** to prevent push into <tt>cvs/</tt> ref namespaces.  The belong in the {{git|anacode/cvs/ensembl-otter}} historic archive.

== Migration to Git ==
<div style='margin:2em; border: 3px green solid; padding: 1em'> This section needs revising.  It was written while switch-over was in the future.
Content of a more historical perspective in [[README.mediawiki|Migrating with cvs2git]]</div>

We are migrating existing team-owned code from CVS to Git.  It is [http://git.internal.sanger.ac.uk/cgi-bin/gitweb.cgi?s=anacode visible on the internal Gitweb] server.

;ensembl-otter: We started with <tt>ensembl-otter</tt> ([http://cvs.sanger.ac.uk/cgi-bin/viewvc.cgi/ensembl-otter/MOVED.txt?root=ensembl&view=markup done]).
;anacode: The <tt>anacode</tt> cvs2git import is not yet ready for production use, due to tag surgery not yet fixed in the ''CVS ,v'' files.
;Other ensembl: There are also imports of other ensembl modules - these are for our internal (read-only) use.
:* Many have problems with the branch structures.
:* They are updated infrequently, when we need to.
:* [[README.mediawiki#ensembl|This is not]] Ensembl migration to Git.
