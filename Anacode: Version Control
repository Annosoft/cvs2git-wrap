[[Category:Anacode|V]]
[[Category:Version Control]]
== CVS modules ==
=== Publicly visible ===
In the [http://cvs.sanger.ac.uk/cgi-bin/viewvc.cgi/ensembl-otter/?root=ensembl Ensembl CVS server],
 cvs -d :ext:cvs.sanger.ac.uk:/cvsroot/ensembl checkout

;ensembl: Core ensembl API
;ensembl-pipeline: Core ensembl analysis pipeline
;ensembl-analysis: Modules used by analysis pipeline to do the actual work (blast searches etc...)
;ensembl-otter: Our core modules which extend Ensembl and deal with saving gene annotations plus Perl/Tk GUI components
:''But see [[#Migration to Git]]''
: In the past, we have moved tags on this module.  <tt>humpub-branch-52</tt> and <tt>humpub-release-52</tt> are particularly affected by this.
;ensembl-ace: Modules for transforming ensembl analysis pipeline data into acedb format

We have only sftp/scp access to these files.  This makes it possible to make exports, but not efficient to do repeat imports.  It is also possible to do direct surgery to ,v files - as ever this requires extreme caution.

=== Only accessible on the Sanger network ===
On the [http://intcvs1.internal.sanger.ac.uk/cgi-bin/viewvc.cgi/?root=anacode internal CVS server],
 cvs -d :ext:cvs.internal.sanger.ac.uk:/repos/cvs/anacode checkout

;PerlModules: Data objects used by the Perl/Tk GUI, plus Sanger specific modules for tasks such as EMBL sequence submissions
;submissions: Scripts used by cron jobs to submit sequence data to EMBL
;chromoview: Visualisation and assembly of chromosomes from overlapping BACs (TPFs to AGPs)
;humscripts: Mostly legacy scripts used in the humpub account
;utils: A few useful scripts mostly written by James eg: new_module for creating a new Perl module

We have direct ssh access to these files.

In the past, we have moved tags on this repository.  <tt>humpub-branch-52</tt> and <tt>humpub-release-52</tt> are particularly affected by this.

=== CVS tags ===

The Ensembl code has its own branching and tagging structure, documented elsewhere.  Anacode uses an Ensembl release and avoids making changes to it.

For each release of the otterlace system, the same tag is used in all of the CVS modules used in otterlace from the two repositories listed above. When a release is ready to be tested (ie: going from dev_otterlace to test_otterlace), it is tagged with <tt>humpub-release-NN-MM</tt>, where NN is the version number incorporated into the URL for the server scripts. (At this point a new dev_otterlace is made for continuing development, with a new version number.) Minor fixes to the new test/production release code are tagged with an incremented ''MM'' component and checked out separately to <tt>/software/anacode/otter/otter_relNN.MM</tt>.

== Migration to Git ==
We are migrating existing team-owned code from CVS to Git, starting with <tt>ensembl-otter</tt>.
This and all our other code is visible under the [http://git.internal.sanger.ac.uk/cgi-bin/gitweb.cgi internal Gitweb] server.

The <tt>anacode</tt> cvs2git import is not yet ready for production use.

There are also imports of other ensembl modules - these are for our internal (read-only) use, and many have problems with the branch structures.

See also [[Using Git]] for some Sanger-specific notes.

=== Getting <tt>ensembl-otter</tt> ===
You can get an <tt>ensembl-otter</tt> checkout like this
 git clone intcvs1:/repos/git/anacode/ensembl-otter.git
 cd ensembl-otter
 
 # and if you need all the old CVS branches and tags
 git remote add more intcvs1:/repos/git/anacode/cvs/ensembl-otter.git
 git fetch more
 
 # see it
 gitk --all &
 
 # update it (latest development)
 git pull

Beyond this, you need to know our current [[#Workflow practices]] to find out which branch you want.
Please contact the team to find out more about the release process.

=== Sending changes back to Anacode ===
Git allows decentralised development - after taking your clone (above) you are free to commit to it,
but this does not directly affect the Anacode central copy.

If you have commits in your own clone which you would like merged to our repository, please let us know.

Members of the <tt>anacode</tt> group have <tt>git push</tt> access to update the central copy.
Please speak to the team if you need to use this.

We have no immediate plans to push our Git repositories to an external service, but would follow the
[[The internal CVS / Subversion server#How can I collaborate with people externally?|Systems guidelines]].
Compare [https://github.com/sanger] [https://github.com/VertebrateResequencing/vr-codebase/network].

=== Workflow practices ===
For other projects we have used ad-hoc commits to master and merges from feature branches.
We will trial the use of [http://nvie.com/posts/a-successful-git-branching-model/ <tt>git flow</tt>]
for management of feature branches.

In imported code, most of the recent release tags are separated from the <tt>master</tt> branch by cvs2svn fixup commits.  This prevents <tt>git describe</tt> from providing useful results.
In future tags will be placed to allow a meaningful version number to be extracted automatically.

=== Import process ===
Our [http://git.internal.sanger.ac.uk/cgi-bin/gitweb.cgi?p=anacode/team_tools.git;a=tree;f=git-importing;hb=refs/heads/master wrapper scripts] in [[Team tools]] perform repeatable imports with stable commitids, and check the contents of tags and the tips of all branches against CVS.  This process has proved fairly stable but can be disrupted by the movement of CVS tags.

Output is pushed to
[http://git.internal.sanger.ac.uk/cgi-bin/gitweb.cgi/anacode/cvs/ensembl-otter.git anacode/cvs/ensembl-otter.git] (all CVS tags and branches, no other Git pushes) and to
[http://git.internal.sanger.ac.uk/cgi-bin/gitweb.cgi/anacode/ensembl-otter.git anacode/ensembl-otter.git] (MAIN branch only, and any other Git pushes).

By keeping all CVS branches and tags under the <tt>cvs/</tt> namespace, we have a clean slate for the future but retain access to old versions.  By keeping CVS history and the Git future in separate repositories, we keep the branch list short and initial history is clear of cvs2git fixups and strange merges.

* Other tools are listed on https://git.wiki.kernel.org/index.php/Interfaces,_frontends,_and_tools#Interaction_with_other_Revision_Control_Systems
** We avoided git-cvsimport because it '''drops branches it does not understand''', such as humpub-branch-52.
** [http://cvs2svn.tigris.org/cvs2git.html cvs2git] is based on the cvs2svn importer.
** mca didn't try [http://progetti.arstecnica.it/tailor/wiki tailor].
* Other preparations and fixes we made,
** Remove dependence on keyword expansion, ''e.g.'' <tt>my $VERSION = (qw$Revision: 1.1 $)[1];</tt> and similar tricks.
** Fix -kb and executable flags.
** Find unlabelled branches and restore their branch tags.  Usually this is caused by attempting to move a branch with <tt>cvs tag -F -B -b</tt> and it cannot be done right.  These can be fixed with <tt>cvs rtag</tt> but it is fiddly.
** In some cases, apply pre-import patches to the ,v files to resolve two-commits-in-one-second ordering issues or fix up lost deltatext.

==== Actions ====
# Place a "we have moved to ..." file <tt>MOVED.txt</tt> in several of the top-level directories.  Leave other files untouched, to assist evacuation efforts with <tt>cvs up; cvs diff</tt> .
# Make the old CVS module read-only for everyone.  [[SIRT:207328]].
# Create/update deployment scripts - currently manual.
# Find and remove CVS keywords
# Find and remove explicit references to CVS
#* Mostly in POD + comments
#* Also in install/make_dist scripts.

=== Mapping of CVS modules to git repos ===
For <tt>ensembl-otter</tt> we import the entire module as on Git repository, and it makes sense this way.

mca thinks the <tt>anacode</tt> may need breaking into pieces, but hasn't yet shown an example.

=== Trac integration ===
* Trac 0.11 [https://trac.internal.sanger.ac.uk/projects/anacode/wiki can only handle one Git repo].
* [[SIRT:187199]] says wait on [http://bugs.debian.org/cgi-bin/bugreport.cgi?bug=563391 BTS 563391].  mca is subscribed.
* ''I made an experimental fetch of multiple repositories' code into the one Trac-watched Git repository, under different namespaces.  This works but doesn't look especially useful. -- [[User:Mca|Mca]] 12:59, 31 May 2011 (UTC)''

== Deployment + Debugging ==

'''This section is out of date, with respect to [[Running a local Otterlace server]].'''

Many scripts are (?) intended to be run from the developer's checkout, using the prevailing PERL5LIB.

=== Otterlace client + server ===
It should be possible to run both client & server from developer checkouts, but this is not (yet) straightforward.

See [[Otterlace stuff]].

Server side options,
;intwebdev per-developer installs: set up intwebdev/cgi-bin/users/''foo''/otter/ to look like www.sanger.ac.uk/cgi-bin/otter/
:* nothing to maintain, beyond placing the code
:* dev environment is closest to production
:* logfiles are hard to obtain, filter and read
;local webserver install: run the server CGIs under a local webserver to retain complete control.
:* have to choose, configure & maintain it
:* pinch the EnsEMBL dev Apache setup from /software ?
:* can also run long-lived CGI queries, which simplifies some report pages and may make it easier to debug slow production queries
:* dev environment differs from production in paths, hostnames, port numbers etc.
:* requires hacked up SangerPaths
:* direct access to uncluttered logfiles
;reroute HTTP fetches to become subprocess forks: cut the HTTP protocol out completely.
:* Otter has one centralised HTTP fetcher, which could easily be replaced
:* ZMap data fetchers also do HTTTP, but (?) using the Otter code
:* dev environment may exhibit different set of bugs to production!
:* requires severely hacked SangerPaths
:* "CGI" log output needs putting somewhere

=== Otterlace configuration ===

[[Otterlace_stuff#Publishing_config_files|Config files]] are currently not in CVS.  Some of it needs to be independent of the code release cycle.

=== Deploying to web-team servers ===

This applies to
* the Otterlace server (the major production item), and some other tools
* dbchk
* JH's healthcheck page

Currently we have a mixture of CVS subtree checkouts and ad-hoc or non-version-controlled files.

Assuming the source checkout is a git repository,
; deploy by rsync : webserver files are overwritten with the new copies
:* commiting from the live (or wwwdev) site becomes difficult
:* hacking live site is strongly discouraged
:* <tt>rsync -n</tt> or <tt>diff</tt> can tell of modifications on either side, but not where the diff came from
:* modifications to live site are likely to be tromped without notice
; deploy by git-subtree-branch (mca) : create git checkout containing only the desired files
:* it's an unusual / custom mechanism
:* it is possible to hack & commit on the server, then cherry-pick commits back onto the master (text changes track across the rename, but new files don't)