[[Category:Anacode]]

== CVS modules ==
=== Publicly visible ===

 cvs -d :ext:cvs.sanger.ac.uk:/cvsroot/ensembl checkout

;ensembl: Core ensembl API
;ensembl-pipeline: Core ensembl analysis pipeline
;ensembl-analysis: Modules used by analysis pipeline to do the actual work (blast searches etc...)
;ensembl-otter: Our core modules which extend Ensembl and deal with saving gene annotations plus Perl/Tk GUI components
;ensembl-ace: Modules for transforming ensembl analysis pipeline data into acedb format

=== Only accessible on the Sanger network ===

 cvs -d :ext:cvs.internal.sanger.ac.uk:/repos/cvs/anacode checkout

;PerlModules: Data objects used by the Perl/Tk GUI, plus Sanger specific modules for tasks such as EMBL sequence submissions
;submissions: Scripts used by cron jobs to submit sequence data to EMBL
;chromoview: Visualisation and assembly of chromosomes from overlapping BACs (TPFs to AGPs)
;humscripts: Mostly legacy scripts used in the humpub account
;utils: A few useful scripts mostly written by James eg: new_module for creating a new Perl module

=== (tmp section / another incomplete view of the same) ===

{| border=1
! Obtain !! Contains !! Web?
|-
|
 cvs -d :ext:cvs.internal.sanger.ac.uk:/repos/cvs/anacode checkout . -d cvswork-anacode
| team projects...
| [http://intcvs1.internal.sanger.ac.uk/cgi-bin/viewvc.cgi/?root=anacode]
|-
|
| The EnsEMBL project (all of it)
| [http://cvs.sanger.ac.uk/cgi-bin/viewvc.cgi/?root=ensembl]
|-
| 
 git clone intcvs1:/repos/git/anacode/trac.git
| The repository followed by Anacode Trac; currently empty.
|}


== CVS usage notes ==
* <code>ensembl-*</code> repositories are stored on <code>cvs.sanger.ac.uk</code> under <code>/cvsroot/ensembl</code>, but we do not have ssh access to this server and so have to use sftp. You can still do useful things like <code>chmod</code> on scripts, but the filenames seem to have <code>,v</code> appended to them, just use this in the command, e.g.:
<pre>
chmod 555 /cvsroot/ensembl/ensembl-otter/scripts/apache/nph-get_accession_types,v
</pre>
* Other repositories (e.g. for <code>PerlModules</code> and <code>humscripts</code>) are stored on <code>cvs.internal.sanger.ac.uk</code> under <code>/repos/cvs/anacode</code> and we do have ssh access to this machine.
* To get cvs to update new directories as well as files try <code>cvs update -d</code>
* To revert a file (i.e. trash all local changes) to the latest version from the repo try <code>cvs update -C <filename></code>, the locally modified file is saved to <code>.#<filename>.<version></code>

== Migration to Git ==
We are hoping to migrate team-owned code from CVS to Git.

=== Other people involved ===
We haven't discussed it outside the team much, yet.
* zmap
* vega

=== Possible tools ===
As listed on https://git.wiki.kernel.org/index.php/Interfaces,_frontends,_and_tools#Interaction_with_other_Revision_Control_Systems
==== git-cvsimport (uses cvsps) ====
* Consider using [http://www.cobite.com/cvsps/ 2.2b1] (not in Debian yet) because it [http://thread.gmane.org/gmane.comp.version-control.git/78674 fixes some bugs]
* Allows incremental imports
* mca has used this (but not for real) and seen some of its limitations

==== cvs2git ====
* "Does a better job".
* "scp -rp" can get hold of the ,v files from the ensembl repo.
* http://cvs2svn.tigris.org/cvs2git.html and http://cvs2svn.tigris.org/features.html

==== Tailor ====
* http://progetti.arstecnica.it/tailor/wiki

=== Mapping of CVS modules to git repos ===
Something mca thinks is necessary, but hasn't yet shown an example.

=== Mapping of CVS version numbers, per file, to Git commit ids ===
We'll disable keyword expansion, so it may be necessary to record this mapping elsewhere (e.g. separate file per git repo).
YAGNI?  But can we get it back later?

=== CVS fixups ===
jh13 has done some,
* Removing dependence on keyword expansion, by removing <tt>my $VERSION = (qw$Revision: 1.1 $)[1];</tt> type tricks.
* Fixing -kb and executable flags.

== Deployment + Debugging ==
Many scripts are (?) intended to be run from the developer's checkout, using the prevailing PERL5LIB.

=== Otterlace client + server ===
It should be possible to run both client & server from developer checkouts, but this is not (yet) straightforward.

See [[Otterlace stuff]].

Server side options,
;intwebdev per-developer installs: set up intwebdev/cgi-bin/users/''foo''/otter/ to look like www.sanger.ac.uk/cgi-bin/otter/
:* nothing to maintain, beyond placing the code
:* dev environment is closest to production
:* logfiles are hard to obtain, filter and read
;local webserver install: run the server CGIs under a local webserver to retain complete control.
:* have to choose, configure & maintain it
:* pinch the EnsEMBL dev Apache setup from /software ?
:* can also run long-lived CGI queries, which simplifies some report pages and may make it easier to debug slow production queries
:* dev environment differs from production in paths, hostnames, port numbers etc.
:* requires hacked up SangerPaths
:* direct access to uncluttered logfiles
;reroute HTTP fetches to become subprocess forks: cut the HTTP protocol out completely.
:* Otter has one centralised HTTP fetcher, which could easily be replaced
:* ZMap data fetchers also do HTTTP, but (?) using the Otter code
:* dev environment may exhibit different set of bugs to production!
:* requires severely hacked SangerPaths
:* "CGI" log output needs putting somewhere

=== Otterlace configuration ===

[[Otterlace_stuff#Publishing_config_files|Config files]] are currently not in CVS.  Some of it needs to be independent of the code release cycle.

=== Deploying to web-team servers ===

This applies to
* the Otterlace server (the major production item), and some other tools
* dbchk
* JH's healthcheck page

Currently we have a mixture of CVS subtree checkouts and ad-hoc or non-version-controlled files.

Assuming the source checkout is a git repository,
; deploy by rsync : webserver files are overwritten with the new copies
:* commiting from the live (or wwwdev) site becomes difficult
:* hacking live site is strongly discouraged
:* <tt>rsync -n</tt> or <tt>diff</tt> can tell of modifications on either side, but not where the diff came from
:* modifications to live site are likely to be tromped without notice
; deploy by git-subtree-branch (mca) : create git checkout containing only the desired files
:* it's an unusual / custom mechanism
:* it is possible to hack & commit on the server, then cherry-pick commits back onto the master (text changes track across the rename, but new files don't)