[[Category:Anacode|V]]
[[Category:Version Control]]
== CVS modules ==
=== Publicly visible ===
In the [http://cvs.sanger.ac.uk/cgi-bin/viewvc.cgi/ensembl-otter/?root=ensembl Ensembl CVS server],
 cvs -d :ext:cvs.sanger.ac.uk:/cvsroot/ensembl checkout

;ensembl: Core ensembl API
;ensembl-pipeline: Core ensembl analysis pipeline.
: Includes many scripts an subclasses specific to Anacode.
;ensembl-analysis: Modules used by analysis pipeline to do the actual work (blast searches etc...)
;<strike>ensembl-otter</strike>: ''Historic - no further updates.''  Our core modules which extend Ensembl and deal with saving gene annotations plus Perl/Tk GUI components are now stored in [[#Git repositories]].
: In the past, we have moved tags on this module.  <tt>humpub-branch-52</tt> and <tt>humpub-release-52</tt> are particularly affected by this.  [[#Migration to Git]] required some patch-up surgery as a result.
;ensembl-ace: Modules for transforming ensembl analysis pipeline data into acedb format

We have only sftp/scp access to these files.  This makes it possible to make exports, but not efficient to do repeat imports.  It is also possible to do direct surgery to ,v files - as ever this requires extreme caution.

=== Only accessible on the Sanger network ===
On the [http://intcvs1.internal.sanger.ac.uk/cgi-bin/viewvc.cgi/?root=anacode internal CVS server],
 cvs -d :ext:cvs.internal.sanger.ac.uk:/repos/cvs/anacode checkout

;PerlModules: Data objects used by the Perl/Tk GUI, plus Sanger specific modules for tasks such as EMBL sequence submissions
;submissions: Scripts used by cron jobs to submit sequence data to EMBL
;chromoview: Visualisation and assembly of chromosomes from overlapping BACs (TPFs to AGPs)
;humscripts: Mostly legacy scripts used in the humpub account
;utils: A few useful scripts mostly written by James eg: new_module for creating a new Perl module

We have full login access to these files.

In the past, we have moved tags on this repository.  <tt>humpub-branch-52</tt> and <tt>humpub-release-52</tt> are particularly affected by this.
Some modules still contain breakage which would render commitids in a cvs2git import unstable.

=== CVS tags ===
The Ensembl code has its own branching and tagging structure, documented elsewhere.  Anacode uses an Ensembl release and avoids making changes to it.

For each release of the otterlace system, the same tag is used in all of the CVS modules used in otterlace from the two repositories listed above. When a release is ready to be tested (ie: going from dev_otterlace to test_otterlace), it is tagged with <tt>humpub-release-NN-MM</tt>, where NN is the version number incorporated into the URL for the server scripts. (At this point a new dev_otterlace is made for continuing development, with a new version number.) Minor fixes to the new test/production release code are tagged with an incremented ''MM'' component and checked out separately to <tt>/software/anacode/otter/otter_relNN.MM</tt>.

== Git repositories ==
There are some fresh- and forked- project Git repositories, and some cvs2git imports (see below).
All are visible in [http://git.internal.sanger.ac.uk/cgi-bin/gitweb.cgi?s=anacode the <tt>/repos/git/anacode/</tt> namespace] of the internal Git server.

=== Copies where? ===
Git is decentralised, so repositories may exist in several places.

This list should cover all '''places''' where there are repositories, but does not attempt to enumerate all the repositories.

:; "the server": Everything of significance ''should'' be on <tt>git.internal.sanger.ac.uk</tt> ''aka.'' <tt>intcvs1</tt> .
:: We regard this as our central master repository.  It is our main point of exchange between developers, source for releases, and the repository most often named <tt>origin</tt> .
:; Github: Some projects are also pushed to [https://github.com/Anacode/ the "Anacode" organisation] on github.com
::* To become a member of Anacode on Github, you must create a personal account and be invited by an existing member.  These are all zero-price acounts.
::*: Github does not support the notion of an organisation ''doing'' anything, including pushing - all actions are taken by members of the organisation.
::* As of 2011-08 only release branches of ensembl-otter are [http://git.internal.sanger.ac.uk/cgi-bin/gitweb.cgi?p=anacode/team_tools.git;f=cron/github-pushes;hb=HEAD published] automatically, at 06:06 every day by mca@[http://git.internal.sanger.ac.uk/cgi-bin/gitweb.cgi?p=anacode/team_tools.git;a=tree;f=confomatic;hb=HEAD deskpro-mca].
::* cron2rss [https://github.com/Anacode/cron2rss/network/members was forked] from Github.
:; Developers: have zero or more checkouts of any of these, as necessary.
:: We usually don't fetch from each others working copies, but sometimes we do use this for previewing code.
:: We don't push to other developers.
:: Some repositories are important enough for one developer to have multiple checkouts.
::: mca has a "stable" team_tools to be used per se, and a "dev" team_tools in which rebases and feature branches can be used without breaking tools in use.
::: It is sometimes useful to push and fetch between these, so they have git-remote configuration for each other.
:; Installations and downloads: Our current build methods usually export, rather than leaving the <tt>.git/</tt> in the built copy.

=== Recovery: restoring a delete branch ===
What can you do if you delete a branch and then decide you want it back?
Note that "git branch -d" enthusiastically removes the reflog also!

Known options
* Fetch it back from somewhere.
* Scroll the terminal back up and find "<tt>Deleted branch foo (was 2d76e6c)</tt>".
* Raid the snapshot at <tt>~/../.snapshot/hourly.0/$USER/</tt> (but beware it may not have your last hour's work).
* Use <tt>gitk</tt> to see all commits not yet garbage-collected.
** The plan is to find the superset of existing commits not reachable from HEAD, everything visited in any reflog, and the log of HEAD. It can make a rather busy tree.
** Configure <tt>gitk</tt> to do this by inserting the following before the last "<tt>}</tt>" in <tt>~/.gitk</tt>&nbsp;. This appears on the View menu.  Refresh it with ctrl-f5.
  set permviews {{Lost {} --all {git fsck --full --unreachable HEAD | cut -d' ' -f3; git log -g --abbrev-commit --pretty=format:%H --all; echo; git log -g --abbrev-commit --pretty=format:%H; echo}}

=== [[wikipedia:Gumbys|Gumby]] repair: unpushing ===
In Git, any commit may be rebased, amended or otherwise munged.  But after it has been "pushed" to a place where other people/scripts might pull it, doing this can cause chaos and confusion.

; Push the replacement (to a new branch name) as soon as possible: so everyone can see and discuss it.  This is a safe, reversible operation.  Rewinding the Gumbied branch can be done after discussion.
; Talk to other repository fetchers before backtracking a branch:
:* Unless they are away, and waiting might make the chaos worse?
:* Beware some fetchers may have work branched from after the mistake, and may need help rescuing it.
:* Recommend the use of <tt>git fetch</tt> over <tt>git pull</tt> .  Merging is not going to help.
; The git tools do not make it easy:
:* The Git documentation recommends against it.
:* The central repositories have the default "shared" configuration, which forbids non-fast-forward pushes.
:* You can push a deletion of the branch, and then replace it with a rewind.  Except for master (or other default/checked out branch), where you must get on the server and rename or reset the master.
; Clean up ASAP: It is helpful if everyone picks up the new commit, forgets the old one, and rebases pending work where necessary, as soon as possible.
; Do not move tags:  It's too confusing, just use the next one in the sequence.
:* Deleting the old one is then easier.  It is just a bad tag which should be forgotten.
:* git-fetch(1) will not move tags, unless told to with <tt>--tags</tt>.
; Recognised good reasons to do it:
:* accidentally committing data-destroying or OS-crashing code, including uncontrolled recursion.  Rationale: they make use of git-bisect(1) less useful.

=== Routine rebasing: author branches ===
As described in [[A Minimal Git Workflow#Variations]], we have "author branches" named like <tt>$USER/$FEATURE</tt> which other members of the team should consider read-only.

These may be rebased freely by the owner (working around the fast-forward-only restriction).

Please consult the branch owner before merging, branching from or pushing to these branches.

== Code QA measures ==
* We have tools to run Perlcritic and "perl -c" on our code
** [http://git.internal.sanger.ac.uk/cgi-bin/gitweb.cgi?p=anacode/team_tools.git;a=tree;f=elisp;hb=HEAD emacs linkage]
** For [[webpublish]], we [[SIRT:240746|check for AUTHOR sections in Perl source]] with perlcritic / as a prove(1)able test
* Jeremy runs cronjobs and ad-hoc passes of some tools?
* intcvs1 {{git|anacode/ensembl-otter}} has '''.git/hooks'''
** to perlcritic the changed files (experimental)
** to prevent push into <tt>cvs/</tt> ref namespaces.  The belong in the {{git|anacode/cvs/ensembl-otter}} historic archive.

== Migration to Git ==
<div style='margin:2em; border: 3px green solid; padding: 1em'> This section needs revising.  It was written while switch-over was in the future.
Content of a more historical perspective in [[Migrating with cvs2git]]</div>

We are migrating existing team-owned code from CVS to Git, starting with <tt>ensembl-otter</tt> (done).
This and all our other code is visible under the [http://git.internal.sanger.ac.uk/cgi-bin/gitweb.cgi internal Gitweb] server.

The <tt>anacode</tt> cvs2git import is not yet ready for production use, due to tag surgery not yet fixed in the ''CVS ,v'' files.

There are also imports of other ensembl modules - these are for our internal (read-only) use, and many have problems with the branch structures.

See also [[Using Git]] for some Sanger-specific notes.

=== Getting <tt>ensembl-otter</tt> ===
You can get an <tt>ensembl-otter</tt> checkout like this
 git clone intcvs1:/repos/git/anacode/ensembl-otter.git
 cd ensembl-otter
 
 # and if you need all the old CVS branches and tags
 git remote add more intcvs1:/repos/git/anacode/cvs/ensembl-otter.git
 git fetch more
 
 # see it
 gitk --all &
 
 # update it (latest development)
 git pull

Beyond this, you need to know our current [[#Workflow practices]] to find out which branch you want.
Please contact the team to find out more about the release process.

=== Sending changes back to Anacode ===
Git allows decentralised development - after taking your clone (above) you are free to commit to it,
but this does not directly affect the Anacode central copy.

If you have commits in your own clone which you would like merged to our repository, please let us know.

Members of the <tt>anacode</tt> group have <tt>git push</tt> access to update the central copy.
Please speak to the team if you need to use this.

This repository [https://github.com/Anacode/ensembl-otter published with Github], following the
[[The internal CVS / Subversion server#How can I collaborate with people externally?|Systems guidelines]].

=== Workflow practices ===
For other projects we have used ad-hoc commits to master and merges from feature branches.

There is a proposal for [[A Minimal Git Workflow]].
We will trial the use of [http://nvie.com/posts/a-successful-git-branching-model/ <tt>git flow</tt>]
for management of feature branches.

In imported code, most of the recent release tags are separated from the <tt>master</tt> branch by cvs2svn fixup commits.  This prevents <tt>git describe</tt> from providing useful results.
In future tags will be placed to allow a meaningful version number to be extracted automatically.

=== Mapping of CVS modules to git repos ===
For <tt>ensembl-otter</tt> we import the entire module as on Git repository, and it makes sense this way.

mca thinks the <tt>anacode</tt> may need breaking into pieces, but hasn't yet shown an example.

=== Trac integration ===
* Trac 0.11 [https://trac.internal.sanger.ac.uk/projects/anacode/wiki can only handle one Git repo].
* [[SIRT:187199]] says wait on [http://bugs.debian.org/cgi-bin/bugreport.cgi?bug=563391 BTS 563391].  mca is subscribed.
* ''I made an experimental fetch of multiple repositories' code into the one Trac-watched Git repository, under different namespaces.  This works but doesn't look especially useful. -- [[User:Mca|Mca]] 12:59, 31 May 2011 (UTC)''

== Deployment + Debugging ==
Many scripts are (?) intended to be run from the developer's checkout, using the prevailing PERL5LIB.

=== Otterlace client + server ===
<div style='margin:2em; border: 3px green solid; padding: 1em'> 
'''This section is out of date, with respect to [[Running a local Otterlace server]].'''
Is any of this still relevant? -- [[User:Mca|Mca]] 16:17, 10 May 2012 (UTC)
 </div>

It should be possible to run both client & server from developer checkouts, but this is not (yet) straightforward.

See [[Otterlace stuff]].

Server side options,
;intwebdev per-developer installs: set up intwebdev/cgi-bin/users/''foo''/otter/ to look like www.sanger.ac.uk/cgi-bin/otter/
:* nothing to maintain, beyond placing the code
:* dev environment is closest to production
:* logfiles are hard to obtain, filter and read
;local webserver install: run the server CGIs under a local webserver to retain complete control.
:* have to choose, configure & maintain it
:* pinch the EnsEMBL dev Apache setup from /software ?
:* can also run long-lived CGI queries, which simplifies some report pages and may make it easier to debug slow production queries
:* dev environment differs from production in paths, hostnames, port numbers etc.
:* requires hacked up SangerPaths
:* direct access to uncluttered logfiles
;reroute HTTP fetches to become subprocess forks: cut the HTTP protocol out completely.
:* Otter has one centralised HTTP fetcher, which could easily be replaced
:* ZMap data fetchers also do HTTTP, but (?) using the Otter code
:* dev environment may exhibit different set of bugs to production!
:* requires severely hacked SangerPaths
:* "CGI" log output needs putting somewhere

=== Otterlace configuration ===
[[Otterlace_stuff#Publishing_config_files|Config files]] are currently not in CVS.  Some of it needs to be independent of the code release cycle.

See [[SIRT:226540|Version control Otter data]] and [[SIRT:257525|The species.dat and users.txt configuration files should be independent of the otter client version]].

=== Deploying to (legacy) web-team servers ===
<div style='margin:2em; border: 3px green solid; padding: 1em'> This section will be unncesary once the legacy webservers are gone. </div>

This applies to
* the Otterlace server (the major production item), and some other tools
* dbchk
* JH's healthcheck page

Currently we have a mixture of CVS subtree checkouts and ad-hoc or non-version-controlled files.

Assuming the source checkout is a git repository,
; deploy by rsync : webserver files are overwritten with the new copies
:* commiting from the live (or wwwdev) site becomes difficult
:* hacking live site is strongly discouraged
:* <tt>rsync -n</tt> or <tt>diff</tt> can tell of modifications on either side, but not where the diff came from
:* modifications to live site are likely to be tromped without notice
; deploy by git-subtree-branch (mca) : create git checkout containing only the desired files
:* it's an unusual / custom mechanism
:* it is possible to hack & commit on the server, then cherry-pick commits back onto the master (text changes track across the rename, but new files don't)

== Articles ==
This collection of external articles influencing our thoughts on Git usage started long after we migrated our first repository.
; [http://lwn.net/Articles/409635/ Lessons from PostgreSQL's Git transition] : a strong influence on Anacode's choice of cvs2git
; http://www.martinfowler.com/bliki/FeatureBranch.html : feature branches may discourage refactoring